// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gocalendar

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GoCalendarCRUDClient is the client API for GoCalendarCRUD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoCalendarCRUDClient interface {
	CreateEvent(ctx context.Context, in *CreateEventMessage, opts ...grpc.CallOption) (*EventResponseMessage, error)
	ReadEvents(ctx context.Context, in *ReadEventsMessage, opts ...grpc.CallOption) (*EventsResponseMessage, error)
	UpdateEvent(ctx context.Context, in *UpdateEventMessage, opts ...grpc.CallOption) (*EventResponseMessage, error)
	DeleteEvent(ctx context.Context, in *DeleteEventMessage, opts ...grpc.CallOption) (*empty.Empty, error)
}

type goCalendarCRUDClient struct {
	cc grpc.ClientConnInterface
}

func NewGoCalendarCRUDClient(cc grpc.ClientConnInterface) GoCalendarCRUDClient {
	return &goCalendarCRUDClient{cc}
}

func (c *goCalendarCRUDClient) CreateEvent(ctx context.Context, in *CreateEventMessage, opts ...grpc.CallOption) (*EventResponseMessage, error) {
	out := new(EventResponseMessage)
	err := c.cc.Invoke(ctx, "/gocalendar.GoCalendarCRUD/createEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCalendarCRUDClient) ReadEvents(ctx context.Context, in *ReadEventsMessage, opts ...grpc.CallOption) (*EventsResponseMessage, error) {
	out := new(EventsResponseMessage)
	err := c.cc.Invoke(ctx, "/gocalendar.GoCalendarCRUD/readEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCalendarCRUDClient) UpdateEvent(ctx context.Context, in *UpdateEventMessage, opts ...grpc.CallOption) (*EventResponseMessage, error) {
	out := new(EventResponseMessage)
	err := c.cc.Invoke(ctx, "/gocalendar.GoCalendarCRUD/updateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goCalendarCRUDClient) DeleteEvent(ctx context.Context, in *DeleteEventMessage, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gocalendar.GoCalendarCRUD/deleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoCalendarCRUDServer is the server API for GoCalendarCRUD service.
// All implementations must embed UnimplementedGoCalendarCRUDServer
// for forward compatibility
type GoCalendarCRUDServer interface {
	CreateEvent(context.Context, *CreateEventMessage) (*EventResponseMessage, error)
	ReadEvents(context.Context, *ReadEventsMessage) (*EventsResponseMessage, error)
	UpdateEvent(context.Context, *UpdateEventMessage) (*EventResponseMessage, error)
	DeleteEvent(context.Context, *DeleteEventMessage) (*empty.Empty, error)
	mustEmbedUnimplementedGoCalendarCRUDServer()
}

// UnimplementedGoCalendarCRUDServer must be embedded to have forward compatible implementations.
type UnimplementedGoCalendarCRUDServer struct {
}

func (UnimplementedGoCalendarCRUDServer) CreateEvent(context.Context, *CreateEventMessage) (*EventResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedGoCalendarCRUDServer) ReadEvents(context.Context, *ReadEventsMessage) (*EventsResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEvents not implemented")
}
func (UnimplementedGoCalendarCRUDServer) UpdateEvent(context.Context, *UpdateEventMessage) (*EventResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (UnimplementedGoCalendarCRUDServer) DeleteEvent(context.Context, *DeleteEventMessage) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (UnimplementedGoCalendarCRUDServer) mustEmbedUnimplementedGoCalendarCRUDServer() {}

// UnsafeGoCalendarCRUDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoCalendarCRUDServer will
// result in compilation errors.
type UnsafeGoCalendarCRUDServer interface {
	mustEmbedUnimplementedGoCalendarCRUDServer()
}

func RegisterGoCalendarCRUDServer(s grpc.ServiceRegistrar, srv GoCalendarCRUDServer) {
	s.RegisterService(&_GoCalendarCRUD_serviceDesc, srv)
}

func _GoCalendarCRUD_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCalendarCRUDServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocalendar.GoCalendarCRUD/createEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCalendarCRUDServer).CreateEvent(ctx, req.(*CreateEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCalendarCRUD_ReadEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEventsMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCalendarCRUDServer).ReadEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocalendar.GoCalendarCRUD/readEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCalendarCRUDServer).ReadEvents(ctx, req.(*ReadEventsMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCalendarCRUD_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCalendarCRUDServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocalendar.GoCalendarCRUD/updateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCalendarCRUDServer).UpdateEvent(ctx, req.(*UpdateEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoCalendarCRUD_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoCalendarCRUDServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocalendar.GoCalendarCRUD/deleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoCalendarCRUDServer).DeleteEvent(ctx, req.(*DeleteEventMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoCalendarCRUD_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gocalendar.GoCalendarCRUD",
	HandlerType: (*GoCalendarCRUDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createEvent",
			Handler:    _GoCalendarCRUD_CreateEvent_Handler,
		},
		{
			MethodName: "readEvents",
			Handler:    _GoCalendarCRUD_ReadEvents_Handler,
		},
		{
			MethodName: "updateEvent",
			Handler:    _GoCalendarCRUD_UpdateEvent_Handler,
		},
		{
			MethodName: "deleteEvent",
			Handler:    _GoCalendarCRUD_DeleteEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crudEvent.proto",
}
